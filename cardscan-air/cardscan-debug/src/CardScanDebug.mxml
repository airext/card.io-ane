<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:local="*">

    <fx:Script>
        <![CDATA[
        import com.yuppablee.cardscan.CardScan;
        import com.yuppablee.cardscan.data.CardScanOptions;
        import com.yuppablee.cardscan.data.CreditCard;
        import com.yuppablee.cardscan.events.CardScanEvent;

        import spark.components.Alert;

        [Bindable]
        public var card:CreditCard;

        private function isSupported():void
        {
            Alert.show(String(CardScan.isSupported()));
        }

        private function libraryVersion():void
        {
            Alert.show(String(CardScan.libraryVersion));
        }

        private function scanForPayment():void
        {
            CardScan.getInstance().addEventListener(CardScanEvent.SCAN_COMPLETE,
                function(event:CardScanEvent):void
                {
                    card = event.info;

                    trace(event.info);
                });

            CardScan.getInstance().addEventListener(Event.CANCEL,
                function(event:Event):void
                {
                    trace("cancelled");
                });

            var options:CardScanOptions = new CardScanOptions();
            options.hideLogo = true;

            CardScan.getInstance().scanForPayment(options);

        }

        ]]>
    </fx:Script>

    <fx:Declarations>
        <fx:Component className="ScanForPaymentPopup">
            <s:SkinnablePopUpContainer verticalCenter="0" horizontalCenter="0">
                <fx:Script>
                    <![CDATA[
                    import com.yuppablee.cardscan.CardScan;
                    import com.yuppablee.cardscan.data.CardScanOptions;
                    import com.yuppablee.cardscan.data.ios.UIBarStyle;
                    import com.yuppablee.cardscan.enum.CardScanDetectionMode;
                    import com.yuppablee.cardscan.events.CardScanEvent;

                    import mx.collections.ArrayCollection;

                    [Bindable]
                    private var options:CardScanOptions = new CardScanOptions();

                    private function scan():void
                    {
                        CardScan.getInstance().addEventListener(CardScanEvent.SCAN_COMPLETE,
                            function(event:CardScanEvent):void
                            {
                                close(false, event.info);
                            });

                        CardScan.getInstance().addEventListener(Event.CANCEL,
                            function(event:Event):void
                            {
                                close(false, null);
                            });

                        trace(options.guideColor);

                        CardScan.getInstance().scanForPayment(options);
                    }

                    ]]>
                </fx:Script>

                <s:TitleWindow title="Scan for Payment" height="1000" close="close()" verticalCenter="0" horizontalCenter="0">
                    <s:Scroller width="100%" height="100%">
                        <s:VGroup width="100%" padding="10" gap="10">
                            <s:Label text="languageOrLocale:" />
                            <s:TextInput width="100%" text="{options.languageOrLocale}" change="options.languageOrLocale = event.target.text;" />

                            <s:Label text="guideColor:" />
                            <s:TextInput width="100%" text="{options.guideColor ? options.guideColor.toString(16) : ''}" change="options.guideColor = parseInt(event.target.text, 16);" />

                            <s:CheckBox label="suppressScanConfirmation" selected="{options.suppressScanConfirmation}" change="options.suppressScanConfirmation = event.target.selected;" />

                            <s:Label text="scanInstructions:" />
                            <s:TextInput width="100%" text="{options.scanInstructions}" change="options.scanInstructions = event.target.text;" />

                            <s:CheckBox label="hideLogo" selected="{options.hideLogo}" change="options.hideLogo = event.target.selected;" />

                            <s:CheckBox label="requireExpiry" selected="{options.requireExpiry}" change="options.requireExpiry = event.target.selected;" />

                            <s:CheckBox label="requireCVV" selected="{options.requireCVV}" change="options.requireCVV = event.target.selected;" />

                            <s:CheckBox label="requirePostalCode" selected="{options.requirePostalCode}" change="options.requirePostalCode = event.target.selected;" />

                            <s:CheckBox label="scanExpiry" selected="{options.scanExpiry}" change="options.scanExpiry = event.target.selected;" />

                            <s:CheckBox label="useCardIOLogo" selected="{options.useCardIOLogo}" change="options.useCardIOLogo = event.target.selected;" />

                            <s:CheckBox label="suppressManualEntry" selected="{options.suppressManualEntry}" change="options.suppressManualEntry = event.target.selected;" />

                            <s:SpinnerList height="200" labelField="name" selectedItem="{options.detectionMode}" change="options.detectionMode = event.target.selectedItem">
                                <s:dataProvider>
                                    <s:ArrayCollection source="{[CardScanDetectionMode.CardImageAndNumber, CardScanDetectionMode.CardImageOnly, CardScanDetectionMode.Automatic]}" />
                                </s:dataProvider>
                            </s:SpinnerList>

                            <s:Line width="100%">
                                <s:stroke>
                                    <s:Stroke color="0xFF0000" />
                                </s:stroke>
                            </s:Line>

                            <s:CheckBox label="keepStatusBarStyle" selected="{options.getProperty(CardScanOptions.IOS_KEEP_STATUS_BAR_STYLE)}" change="options.setProperty(CardScanOptions.IOS_KEEP_STATUS_BAR_STYLE, event.target.selected);" />

                            <s:CheckBox label="navigationBarStyle" selected="{options.getProperty(CardScanOptions.IOS_NAVIGATION_BAR_STYLE)}" change="options.setProperty(CardScanOptions.IOS_NAVIGATION_BAR_STYLE, event.target.selected ? UIBarStyle.UIBarStyleBlack : UIBarStyle.UIBarStyleDefault);" />

                            <s:Label text="navigationBarTintColor:" />
                            <s:TextInput width="100%" text="{options.getProperty(CardScanOptions.IOS_NAVIGATION_BAR_TINT_COLOR)}" change="options.setProperty(CardScanOptions.IOS_NAVIGATION_BAR_TINT_COLOR, parseInt(event.target.text, 16));" />

                            <s:CheckBox label="disableBlurWhenBackgrounding" selected="{options.getProperty(CardScanOptions.IOS_DISABLE_BLUR_WHEN_BACKGROUNDING)}" change="options.setProperty(CardScanOptions.IOS_DISABLE_BLUR_WHEN_BACKGROUNDING, event.target.selected);" />

                            <s:CheckBox label="suppressScannedCardImage" selected="{options.getProperty(CardScanOptions.IOS_SUPPRESS_SCANNED_CARD_IMAGE)}" change="options.setProperty(CardScanOptions.IOS_SUPPRESS_SCANNED_CARD_IMAGE, event.target.selected);" />

                            <s:CheckBox label="maskManualEntryDigits" selected="{options.getProperty(CardScanOptions.IOS_MASK_MANUAL_ENTRY_DIGITS)}" change="options.setProperty(CardScanOptions.IOS_MASK_MANUAL_ENTRY_DIGITS, event.target.selected);" />

                            <s:CheckBox label="allowFreelyRotatingCardGuide" selected="{options.getProperty(CardScanOptions.IOS_ALLOW_FREELY_ROTATING_CARD_GUIDE)}" change="options.setProperty(CardScanOptions.IOS_ALLOW_FREELY_ROTATING_CARD_GUIDE, event.target.selected);" />

                            <s:Button label="Scan" click="scan();" />
                        </s:VGroup>
                    </s:Scroller>
                </s:TitleWindow>
            </s:SkinnablePopUpContainer>
        </fx:Component>
        <local:ScanForPaymentPopup id="popup" close="card = event.data as CreditCard;" />
    </fx:Declarations>

    <s:layout>
        <s:VerticalLayout horizontalAlign="justify" gap="30" paddingTop="30" />
    </s:layout>

    <s:Button label="Is Supported" click="isSupported();" />
    <s:Button label="Card.IO version" click="libraryVersion();" />
    <s:Button label="Scan for Payment" click="popup.open(this);" />

    <s:CalloutButton label="Scan 2">
        <s:calloutContent>
            <s:BorderContainer backgroundColor="0x7fffd4" color="0xFFFFFF" borderWeight="2" width="280" height="150" cornerRadius="5">
                <s:Scroller width="100%" height="100%">
                    <s:Group width="100%" >
                        <s:Form id="frm" width="100%" >
                            <!-- Reduce gap between form items. -->
                            <s:layout>
                                <s:FormLayout gap="-14"/>
                            </s:layout>
                            <s:FormHeading label="STACKED SPARK FORM" color="#FFFFFF" width="300"/>
                            <s:FormItem sequenceLabel="1." label="First name" required="true">
                                <s:TextInput id="fName" maxChars="64" />
                            </s:FormItem>
                            <s:FormItem sequenceLabel="2." label="Last name">
                                <s:TextInput id="lName" maxChars="64" />
                            </s:FormItem>
                            <s:FormItem sequenceLabel="3." label="Address">
                                <s:TextInput id="AddressLine1" maxChars="32"/>
                                <s:TextInput id="AddressLine2" maxChars="32"/>
                                <s:TextInput id="AddressLine3" maxChars="32"/>
                            </s:FormItem>
                            <s:FormItem sequenceLabel="4." label="City">
                                <s:TextInput id="City" maxChars="64" />
                            </s:FormItem>
                            <s:FormItem sequenceLabel="5." label="State">
                                <s:TextInput id="State" maxChars="64" />
                            </s:FormItem>
                            <s:FormItem sequenceLabel="6." label="ZipCode" required="true">
                                <s:TextInput id="ZipCode" maxChars="64" />
                            </s:FormItem>
                        </s:Form>
                    </s:Group>
                </s:Scroller>
            </s:BorderContainer>
        </s:calloutContent>
    </s:CalloutButton>

    <s:HGroup>
        <s:Label text="{card.cardType.getDisplayName('en_US')}" />
        <s:Image source="{card.cardType.logo}" />
    </s:HGroup>
    <s:TextInput width="100%" text="{card.cardNumber}" />
    <s:TextInput width="100%" text="{card.redactedCardNumber}" />
    <s:HGroup>
        <s:TextInput width="50%" text="{card.expiryMonth}/{card.expiryYear}" />
        <s:TextInput width="50%" text="{card.cvv}" />
    </s:HGroup>

</s:Application>
