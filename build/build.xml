<?xml version="1.0" encoding="UTF-8"?>
<project name="Air Native Extension Build Scripts" default="all">

    <!--=====================================================================-->
    <!--                             Properties                              -->
    <!--=====================================================================-->

    <property name="name" value="cardscan" />

    <property name="ios.project.dir" value="../${name}-ios/CardScan" />
    <property name="air.project.dir" value="../${name}-air/${name}" />
    <property name="air-default.project.dir" value="../${name}-air/${name}-default" />
    <property name="air-debug.project.dir" value="../${name}-air/${name}-debug" />
    <property name="android.project.dir" value="../${name}-android" />

	<property file="build.properties"/>

    <!--=====================================================================-->
    <!--                             Build All                               -->
    <!--=====================================================================-->

    <target name="all" depends="ios,android,air,default,package" description="Full build of extension"/>

    <!--=====================================================================-->
    <!--                          Build iOS Library                          -->
    <!--=====================================================================-->

	<target name="ios" description="Build iOS Library">

        <!-- Create temporary directory for iOS artifacts -->
        <mkdir dir="temp/ios/build/"/>

        <!-- Install Pods dependencies (loads CardIO.a library from repository) -->
		<exec executable="pod" dir="${ios.project.dir}">
			<arg value="install"/>
		</exec>

        <!-- Build iOS part of the extension -->
		<exec executable="xcodebuild" failonerror="true" dir="${ios.project.dir}">
			<arg line='-workspace CardScan.xcworkspace'/>
			<arg line='-scheme CardScan'/>
			<arg line='-sdk iphoneos' />
			<arg line='-configuration Release'/>
			<arg line='SYMROOT=$(PWD)/../build/temp/ios/build'/>
		</exec>

        <!-- Copy iOS build artifacts to temporary build folder -->
		<copy file="temp/ios/build/Release-iphoneos/libCardScan.a" todir="temp/ios" overwrite="true"/>

        <!-- Copy CardIO library from Pods -->
        <copy file="${ios.project.dir}/Pods/CardIO/CardIO/libCardIO.a" todir="temp/ios" overwrite="true"/>

        <!-- Remove temporary directory for iOS artifacts -->
		<delete dir="temp/ios/build/"/>
	</target>

    <!--=====================================================================-->
    <!--                        Build Android Library                        -->
    <!--=====================================================================-->

	<target name="android" description="Build android Library">

        <!-- Builds Android part of the extension -->
		<!-- Resolves dependencies and downloads card.io' SDK from Maven repo -->
		<!-- Compiles Android project and makes .JAR -->
		<exec executable="gradle" failonerror="true" dir="${android.project.dir}/cardscan">
			<arg line="jar" />
			<arg line="--info" />
		</exec>

		<!-- Copy Android build artifacts to temporary build folder -->
		<copy file="${android.project.dir}/cardscan/build/libs/cardscan.jar" todir="temp/android" overwrite="true"/>

		<!-- Copy CardIO library as .JAR file from exploded-aar directory -->
		<copy file="${android.project.dir}/cardscan/build/intermediates/exploded-aar/io.card/android-sdk/5.0.0/jars/classes.jar" tofile="temp/android/card.io.jar" overwrite="true"/>

        <!-- Copy CardIO JNI libraries from exploded-aar directory -->
		<copydir src="${android.project.dir}/cardscan/build/intermediates/exploded-aar/io.card/android-sdk/5.0.0/jni" dest="temp/android/libs" forceoverwrite="true"/>

        <!-- Copy manifest to include it into ANE file -->
        <copy file="${android.project.dir}/cardscan/src/main/AndroidManifest.xml" todir="temp/android" overwrite="true"/>

	</target>

    <!--=====================================================================-->
    <!--                         Build AIR Library                           -->
    <!--=====================================================================-->

    <target name="air" description="Build swc library">

        <!-- Create temporary directory -->
		<mkdir dir="temp/swc/build/"/>

        <!-- Gather classes for the library -->
		<fileset dir="${air.project.dir}/src" casesensitive="yes" id="classfiles">
			<include name="**/*.as"/>
		</fileset>
		<pathconvert property="classlist" refid="classfiles" pathsep=" " dirsep=".">
			<regexpmapper from=".*src.(.*)\.as" to="\1"/>
		</pathconvert>

        <!-- Compile .SWC library -->
        <exec executable="java" failonerror="true">
            <arg line='-jar ${air.sdk}/lib/compc-cli.jar' />
            <arg line='-source-path ${air.project.dir}/src'/>
            <arg line='-output temp/swc/${name}.swc'/>
            <arg line='-swf-version=13'/>
            <arg line='-external-library-path+="${air.sdk}/frameworks/libs/air/airglobal.swc"'/>
            <arg line='-include-classes ${classlist}'/>
        </exec>

        <!-- Unzip .SWC to copy internal library.swf file to corresponded platfom folders -->
		<unzip src="temp/swc/${name}.swc" dest="temp/swc/build" overwrite="true"/>

        <!-- Copy library.swf to iOS platform folder -->
		<copy file="temp/swc/build/library.swf" todir="temp/ios" overwrite="true"/>

        <!-- Copy library.swf to Android platform folder -->
		<copy file="temp/swc/build/library.swf" todir="temp/android" overwrite="true"/>

        <!-- Remove temporary folder -->
		<delete dir="temp/swc/build/"/>
	</target>

    <!--=====================================================================-->
    <!--                     Build AIR Default Library                       -->
    <!--=====================================================================-->

    <target name="default" description="Build default swc library">

        <!-- Create temporary folder -->
		<mkdir dir="temp/default/"/>

        <!-- Gather classes for default .SWC library -->
		<fileset dir="${air-default.project.dir}/src" casesensitive="yes" id="classfiles2">
			<include name="**/*.as"/>
		</fileset>
		<pathconvert property="classlist-default" refid="classfiles2" pathsep=" " dirsep=".">
			<regexpmapper from=".*src.(.*)\.as" to="\1"/>
		</pathconvert>

        <!-- Compile default .SWC library -->
        <exec executable="java" failonerror="true">
            <arg line='-jar ${air.sdk}/lib/compc-cli.jar' />
            <arg line='-source-path ${air-default.project.dir}/src'/>
            <arg line='-output temp/default/${name}.swc'/>
            <arg line='-swf-version=13'/>
            <arg line='-external-library-path+="${air.sdk}/frameworks/libs/air/airglobal.swc"'/>
            <arg line='-include-classes ${classlist-default}'/>
        </exec>

        <!-- Unzip .SWC to copy internal library.swf file to default platform folder -->
		<unzip src="temp/default/${name}.swc" dest="temp/default/swc" overwrite="true"/>

        <!-- Copy library.swf to default platform folder -->
		<copy file="temp/default/swc/library.swf" todir="temp/default" overwrite="true"/>

        <!-- Remove temporary folder -->
		<delete dir="temp/default/swc"/>
	</target>

    <!--=====================================================================-->
    <!--                         Package ANE file                            -->
    <!--=====================================================================-->

    <target name="package" description="Create the extension package">

        <!-- Package ANE file-->
        <exec executable="${air.sdk}/bin/adt${bin.ext}" failonerror="true" dir="temp">
            <arg value="-package"/>
            <arg value="-storetype"/>
            <arg value="pkcs12"/>
            <arg value="-keystore"/>
            <arg value="${keystore.file}"/>
            <arg value="-storepass"/>
            <arg value="${keystore.password}"/>
            <arg value="-target"/>
            <arg value="ane"/>
            <arg value="${name}.ane"/>
            <arg value="../extension.xml"/>
            <arg line="-swc swc/${name}.swc"/>
            <arg line="-platform iPhone-ARM -platformoptions ../platform-ios.xml -C ios/ ."/>
            <arg line="-platform Android-ARM -platformoptions ../platform-android.xml -C android/ ."/>
            <!--<arg line="-platform Android-x86 -platformoptions ../platform-android.xml -C android/ ."/>-->
            <arg line="-platform default -C default/ ."/>
        </exec>

        <!-- Move packaged .ANE file to /bin directory -->
        <move file="temp/${name}.ane" todir="../bin"/>

        <!-- Move default .SWC library to /bin directory -->
        <move file="temp/default/${name}.swc" todir="../bin"/>

        <!-- Remove temporary directory -->
        <delete dir="temp"/>
    </target>

    <!--=====================================================================-->
    <!--                Extra targets for development purpose                    -->
    <!--=====================================================================-->

    <target name="air.debug">

        <!-- Compile SWF file -->
        <exec executable="java" failonerror="true">
            <arg line='-jar ${air.sdk}/lib/mxmlc-cli.jar' />
			<!--<arg line='-compiler.source-path ${air-debug.project.dir}/src'/>-->
			<arg line='-output ${air-debug.project.dir}/bin-debug/CardScanSimple.swf'/>
			<!--<arg line='-compiler.source-path ${air-debug.project.dir}/ane'/>-->
            <arg line='-compiler.external-library-path+="${air-debug.project.dir}/ane"'/>
            <arg line='-external-library-path+="${air.sdk}/frameworks/libs/air/airglobal.swc"'/>
			<arg line='${air-debug.project.dir}/src/CardScanSimple.as'/>
		</exec>

        <!-- Copy required stuff -->
        <!--<copy file="${air-debug.project.dir}/CardScanSimple-app.xml" tofile="CardScanSimple-app.xml" />-->
        <copy file="${air-debug.project.dir}/bin-debug/CardScanSimple.swf" tofile="CardScanSimple.swf" overwrite="true" />
        <copy file="../bin/cardscan.ane" tofile="temp/extdir/cardscan.ane" overwrite="true"/>

        <!-- Package APK file -->
        <exec executable="java" failonerror="true">
            <arg line='-jar ${air.sdk}/lib/adt.jar' />
            <arg value="-package"/>
            <arg value="-target"/>
            <arg value="apk-captive-runtime"/>
            <arg value="-storetype"/>
            <arg value="pkcs12"/>
            <arg value="-keystore"/>
            <arg value="${keystore.file}"/>
            <arg value="-storepass"/>
            <arg value="${keystore.password}"/>
            <arg value="${air-debug.project.dir}/bin-debug/CardScanSimple.apk"/>
            <arg value="${air-debug.project.dir}/CardScanSimple-app.xml"/>
            <arg value="CardScanSimple.swf"/>
            <arg value="-extdir"/>
            <arg value="temp/extdir"/>
            <!--<arg value="-platformsdk"/>-->
            <!--<arg value="/Users/mobitile/Library/Android/sdk"/>-->
        </exec>

        <delete file="CardScanSimple.swf" />
        <delete dir="temp"/>

	</target>

    <target name="install.to.android">
        <exec executable="java" failonerror="true">
            <arg line='-jar ${air.sdk}/lib/adt.jar' />
            <arg value="-installApp"/>
            <arg value="-platform"/>
            <arg value="android"/>
            <!--<arg value="-platformsdk"/>-->
            <!--<arg value="/Users/mobitile/Library/Android/sdk"/>-->
            <arg value="-package"/>
            <arg value="${air-debug.project.dir}/bin-debug/CardScanSimple.apk"/>
        </exec>
    </target>

    <target name="uninstall.from.android">
        <exec executable="java" failonerror="true">
            <arg line='-jar ${air.sdk}/lib/adt.jar' />
            <arg value="-uninstallApp"/>
            <arg value="-platform"/>
            <arg value="android"/>
            <arg value="-platformsdk"/>
            <arg value="/Users/mobitile/Library/Android/sdk"/>
            <arg value="-appid"/>
            <arg value="CardScanSimple"/>
        </exec>
    </target>

</project>